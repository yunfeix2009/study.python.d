# 模拟轮盘抽奖

# 轮盘分为三部分:一等奖,二等奖和三等奖
# 轮盘转的时候是随机的,会产生一个的随机小数x(0<=x<1)
#     如果0<=x<0.08,代表一等奖
#     如果0.08<=x<0.3,代表二等奖
#     如果0.3<=x<1,代表三等奖。
# 模拟10000人参加本次活动,统计各等级奖品的个数
# 最终输出形式为:
#     二等奖需要准备的奖品数量为:2158
#     三等奖需要准备的奖品数量为:7082
#     一等奖需要准备的奖品数量为:760
#

# 导入random库
import random
# 定义一个列表
# 用于存放所有的奖
list=[]
# 定义一个列表
# 用于计算几等奖分别有几个
list_f=[]
# 定义一个抽奖函数
# 参数：一个小数
# 根据题意返回对应的奖
def choujiang(x):
    if x<0.08:
        return 1
    elif x<0.3:
        return 2
    else:
        return 3
# 循环10000次，来模拟有10000在抽奖
# 再把每个人抽的什么奖放在 list 内
for i in range(10000):
    x = random.random()
    y=choujiang(x)
    list.append(y)
# 统计三个奖各抽了几次
# 并存放在 list_f 内
list_f.append(list.count(1))
list_f.append(list.count(2))
list_f.append(list.count(3))
# 最终输出
print('一等奖需要准备的奖品数量为:',list_f[0])
print('二等奖需要准备的奖品数量为:',list_f[1])
print('三等奖需要准备的奖品数量为:',list_f[2])




# 课后作业
# 定义一个函数
# 参数:一个列表
# 功能:返回一个字典，此字典的键值对为此列表的索引及对应的元素。
# 例如:传入的列表为：[11,22,33] 返回的字典为 {0:11,1:22,2:33}
# 要求:如果传给的是空列表或其他类型的数据，不能返回None,返回空字典
# 提示：需要判断参数类型

# 定义目标函数
def func(list):
    # 定义一个字典用来最后返回
    dict={}
    # 判断传给的是否是空列表或其他类型的数据
    # 如果是就返回空字典
    if type(list) != type([2]) or list==[]:
        return {}
    # 循环列表
    # 添加字典的键为列表元素的索引
    # 添加字典的值为列表的元素
    for i in range(len(list)):
        dict[i]=list[i]
    # 返回字典
    return dict
# 调用函数验证功能
print(func([213,4,432,324,342,4,3,32,5]))