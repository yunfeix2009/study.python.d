# 并行 并发
# 多线程（创建线程，启动线程）


# 任务:
# 比如我今天要学唱歌，要学跳舞
# 唱歌是一个任务，跳舞也是一个任务

# 我们可以定义两个函数，来完成唱歌和跳舞
# def sing():
#     print("我在唱歌")
# def dance():
#     print("我在跳舞")
# sing()# 如果想唱歌，就调用sing()函数
# dance()# 如果想跳舞，就调用danCe()函数


# 由结果可以看出，唱歌跳舞是按照调用函数的顺序执行的
# 要么先唱歌再跳舞，要么先跳舞再唱歌
# 那么在生活中一定要顺序执行吗？


# 并发和并行
# 并发：多个任务在同一时间间隔内发生(时间段)
# 并行：多个任务在同一时刻发生(时间点)
# 并发和并行的意义：都可以处理"多任务"


# 例子1：
# 比如我跟两个网友甲、乙聊天
# 并发：在一个电脑上先和甲聊两句，再和乙聊两句
# 并行: 左手操作一个电脑跟甲聊，同时右手用另一台电脑跟乙聊天


# 例子2：
# 假设有A、B、C三个学生需要辅导作业,作业不一样
# 帮每个学生辅导完成作业是一个任务

# 1顺序执行：在学生写作业时老师是空闲着的,效率低下，很久才完成三个任务
# 给A讲→A写作业→给B讲→B写作业→给C讲→C写作业

# 2并发：老师没有空闲着，一直在做事情，很快就完成了三个任务。
# 给A讲 → A写作业 
#         给B讲  → B写作业 
#                  给C讲  → C写作业

# 3并行：找三个老师
# 甲给A讲 → A写作业
# 乙给B讲 → B写作业 
# 丙给C讲 → C写作业




# 多线程
# 线程：程序执行的一条路径
# 多线程:将一个或多个任务分为多个线程执行
# 举例：迅雷开启多条线程下载多个任务
# 作用：提高程序的效率（提高CPU的利用率）
# 多线程程序中，一个线程等待时，CPU可以运行其它的线程而不是等待


# 实现：threading库
import threading
import time
def sing():
    for i in range(5):
        # time.sleep(0.5)#休眠0.5s
        print("我在唱歌")
def dance():
    for i in range(5):
        # time.sleep(0.5)
        print("我在跳舞")
# time1 = time.time()
# sing() 
# dance()  
# print(time.time()-time1)


# time2 = time.time()
# t1 = threading.Thread(target=sing)#创建线程
# t1.start()#启动线程
# t2 = threading.Thread(target=dance)
# t2.start()
# t1.join()# t1,t2执行结束后,主线程才回结束
# t2.join()
# print(time.time()-time2)

# 并行：一个线程等待时，程序就切换到另一个线程执行。
# 所以多线程效率较高。
